{"version":3,"sources":["com/app/generator.cljs"],"mappings":";AAKA;;;oCAAA,pCAAMA,gFAEHC;AAFH,AAGE,OAACC,cAAI,AAACC,mDAAWC,iBAAEH;;AAErB;;;wCAAA,xCAAMI,wFAEHC;AAFH,AAGE,IAAMC,QAAM,AAACC,eAAKF;IACZG,IAAM,AAACC,6CAAKH;AADlB,AAEE,OAACI,gBAAM,AAACC,qDAAa,WAAKC,EAAEC;AAAP,AAAU,GAAM,CAAGA,IAAEL;AAAX,AAAcI;;AAAd;;GAAkBP;;AAErD,AAAA;;;qCAAA,6CAAAS,lFAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mEAAA,nEAAMD,8EAEFE;AAFJ,AAGG,OAACC,iEAAiBD,MAAM,mDAAA,IAAA,vDAACE;AAAD,AAAe,QAAA,MAAK,mBAAA,nBAACC;;;;AAHhD,CAAA,mEAAA,nEAAML,8EAIFE,MAAMI;AAJV,AAKG,IAAMjB,QAAM,AAACN,kCAAgBuB;AAA7B,AACE,8IAAK,mDAAA,nDAACF,tEACD,AAACG,4CAAIC,/FACL,AAACC,6CAAKP,3DACNjB;AAHA,AAAa,OAACG,sCAAoBC;;;;AAN5C,CAAA,6DAAA,7DAAMW;;AAAN,AAWA;;;iCAAA,jCAAMU,0EAEHC,MAAMC,OAAOC,WAAWC,UAAUC;AAFrC,AAGE,iBAAA,mFAAA,sDAAA,tJAAMC;IACAC,YAAY,AAAChC,cAAI,AAACiC,+CAAOP,MAAMK;IAC/BG,aAAY,AAAClC,cAAI,AAACiC,+CAAON,OAAOK;IAEhCG,UAAY,AAACC,+CACC,WAAKC,EAAEC;AAAP,AAAY,qCAAA,9BAACC,wBAASF,EAAEC,yDAAUZ,MAAMC;GACxCO,WACAL;IAEdW,WAAY,8CAAA,9CAACC,2BAAYN,QAAQP,mEAAmBF,MAAMC;IAE1De,WAAY,AAACN,+CACC,WAAKE,IAAIK;AAAT,AACE,OAACC,yBAAUJ,SAASF,IAAIK,IAAIjB,MAAMC;GACpCC,WACAE;IAEde,SAAY,0CAAA,1CAACN,wBAASC,SAASE,+DAAehB,MAAMC;AAjB1D,AAAA,kDAAA,+DAAA,4EAAA,nFAkBekB,wEACAjB,yEACAc;;AAEjB;;;0CAAA,1CAAMI,4FAEHpB,MAAMC,OAAOC,WAAWmB;AAF3B,AAGE,IAAMC,cAAY,CAAGtB,QAAMC;IACrBsB,aAAW,gCAAA,/BAAK,CAAGD,cAAYD;IAC/BG,gBAAc,iBAAAC,qBAAA,gEAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAE,mBAAAF;AAAA,AAAA,QAAA,AAAA7C,gBAAA+C,pBAAMqB;AAAN,AAAA,IAAApB,uBAAA;qFAAAC;AAAA,AAAA,YAAAL,kBAAA,KAAA;;AAAA,AAAA,IAAAK,eAAAA;;AAAA,AAAA,IAAAJ,yBAAA,AAAAC,cAAAG;AAAA,AAAA,GAAAJ;AAAA,AAAA,IAAAI,eAAAJ;AAAA,AAAA,GAAA,AAAAK,6BAAAD;AAAA,IAAAE,kBAo4E6B,AAAAoC,sBAAAtC;IAp4E7BG,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,QAAA,AAAAK,eAAAN,gBAAAK,nCAAsBc;AAAtB,AAAA,AAAA,AAAAZ,uBAAAJ,SAAA,mFAAyCc,EAAEE;;AAA3C,eAAA,CAAAd,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,oEAAA,AAAAC,qBAAAb;;AAAA,OAAAU,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,QAAA,AAAAtD,gBAAAiD,pBAAsBqB;AAAtB,AAAA,OAAAP,eAAA,+FAAA,AAAAF,oEAAA,AAAAG,eAAAf,/FAAyCmB,EAAEE;;;AAA3C;;;;;CAAA,KAAA;;;IAAAL,mBAAA,AAAAnB,cAAA,AAAAE,qBAAwB,AAACqB,8CAAMnD;AAA/B,AAAA,GAAA+C;AAAA,OAAAC,+CAAAD,iBAAA,AAAAE,sDAAA,AAAAH,eAAArB;;AAAA,eAAA,AAAAqB,eAAArB;;;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAAQ,AAAC2B,8CAAMpD;;AAFnC,iFAIO,+CAAA,WAAAsD,1DAACC,lBACDE,/DACA,+DAAA,xDAAC3D,6CAAKyB;AAFN,AAAS,oDAAA+B,7CAACE,8DAAItD;GADdsB;;AAKT;;;gCAAA,hCAAMkC,wEAEHC,WAAWC;AAFd,AAGE,IAAMC,eAAa,AAACrE,iEAAiBmE;AAArC,AACE,OAACG,6CAAK,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,nEAAahE;aAAb,AAAAkE,4CAAAF,eAAA,pEAAmB/D;iBAAnB,AAAAiE,4CAAAF,eAAA,xEAA0B9D;gBAA1B,AAAAgE,4CAAAF,eAAA,vEAAqC7D;YAArC,AAAA+D,4CAAAF,eAAA,nEAA+C5D;mBAA/C,AAAA8D,4CAAAF,eAAA,qEAAA,/IAAqD3C;AAArD,AAEE,IAAMxC,IAAI,iBAAAsF,mBAAI/D;AAAJ,AAAA,oBAAA+D;AAAAA;;AAAUN;;;IACdO,KAAI,iBAAAD,mBAAIjE;AAAJ,AAAA,oBAAAiE;AAAAA;;AAAA,0FAAgB,AAACzE,mBAASM,OAAO,AAACN,mBAASO;;;IAC/CoE,KAAI,iBAAAF,mBAAIhE;AAAJ,AAAA,oBAAAgE;AAAAA;;AAAc,OAAC/C,wCAAsBpB,MAAMC,OAAOmE,GAAG/C;;;AAF/D,AAGE,OAACtB,+BAAaC,MAAMC,OAAOmE,GAAGC,GAAGxF;GACrC+E;;AAEV","names":["com.app.generator/cumulative-sums","nums","cljs.core/vec","cljs.core.reductions","cljs.core/+","com.app.generator/weighted-rand-index","cum-w","total","cljs.core/peek","r","cljs.core.rand","cljs.core/first","cljs.core.keep_indexed","i","w","var_args","G__32889","com.app.generator/create-rand-move","js/Error","count","com.app.generator.create_rand_move","cljs.core.repeatedly","cljs.core/rand-int","weights","cljs.core.map","com.app.const/directions","cljs.core.take","com.app.generator/create-board","width","height","player-pos","walls-pos","route","empty-cell","empty-row","cljs.core.repeat","base-board","b-walls","cljs.core.reduce","b","pos","com.app.helper/put-base","b-player","com.app.helper/put-overlay","goal-pos","dir","com.app.helper/move-step","b-goal","com.app.generator/generate-random-walls","wall-density","total-cells","wall-count","all-positions","iter__4652__auto__","s__32930","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","xs__6308__auto__","iterys__4648__auto__","s__32934","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__32936","cljs.core/chunk-buffer","i__32935","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__32933","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4649__auto__","cljs.core.concat","iter__32929","x","cljs.core.range","y","p1__32900#","cljs.core.remove","cljs.core._EQ_","cljs.core/shuffle","com.app.generator/init-boards","move-count","configs","global-route","cljs.core.mapv","p__32992","map__32994","cljs.core/--destructure-map","cljs.core.get","or__4253__auto__","pp","wp","cljs.core/chunk-first"],"sourcesContent":["(ns com.app.generator\r\n  (:require [clojure.core :as core]\r\n            [com.app.const :refer [directions]]\r\n            [com.app.helper :refer [put-base put-overlay move-step]]))\r\n\r\n(defn cumulative-sums\r\n  \"[nums] -> \uc8fc\uc5b4\uc9c4 \uc22b\uc790 \uc2dc\ud000\uc2a4 \ub204\uc801\ud569 \ubca1\ud130\"\r\n  [nums]\r\n  (vec (reductions + nums)))\r\n\r\n(defn weighted-rand-index\r\n  \"[cum-w] \ub204\uc801\ud569 \ubca1\ud130\ub85c\ubd80\ud130 \ud655\ub960\uc801 \uc778\ub371\uc2a4 \uc120\ud0dd\"\r\n  [cum-w]\r\n  (let [total (peek cum-w)\r\n        r     (rand total)]\r\n    (first (keep-indexed (fn [i w] (when (> w r) i)) cum-w))))\r\n\r\n(defn create-rand-move\r\n  \"\ub79c\ub364 \uc774\ub3d9 \uc2dc\ud000\uc2a4 \uc0dd\uc131: ([count] | ([count weights]))\"\r\n  ([count]\r\n   (create-rand-move count (repeatedly 4 #(+ 1 (rand-int 10)))))\r\n  ([count weights]\r\n   (let [cum-w (cumulative-sums weights)]\r\n     (->> (repeatedly #(weighted-rand-index cum-w))\r\n          (map directions)\r\n          (take count)\r\n          vec))))\r\n\r\n(defn create-board\r\n  \"[width height player-pos walls-pos route]\ub85c \ubcf4\ub4dc \uc0dd\uc131\"\r\n  [width height player-pos walls-pos route]\r\n  (let [empty-cell  [:empty :none]\r\n        empty-row   (vec (repeat width empty-cell))\r\n        base-board  (vec (repeat height empty-row))\r\n        ;; 1) walls \ubc30\uce58\r\n        b-walls     (reduce\r\n                      (fn [b pos] (put-base b pos :wall width height))\r\n                      base-board\r\n                      walls-pos)\r\n        ;; 2) player overlay\r\n        b-player    (put-overlay b-walls player-pos :player width height)\r\n        ;; 3) goal \uc704\uce58 \uacc4\uc0b0\r\n        goal-pos    (reduce\r\n                      (fn [pos dir]\r\n                        (move-step b-player pos dir width height))\r\n                      player-pos\r\n                      route)\r\n        ;; 4) goal base\r\n        b-goal      (put-base b-player goal-pos :goal width height)]\r\n    {:board      b-goal\r\n     :player-pos player-pos\r\n     :goal-pos   goal-pos}))\r\n\r\n(defn generate-random-walls\r\n  \"\ub79c\ub364\ud55c \ubcbd \uc704\uce58\ub4e4\uc744 \uc0dd\uc131\"\r\n  [width height player-pos wall-density]\r\n  (let [total-cells (* width height)\r\n        wall-count (int (* total-cells wall-density))\r\n        all-positions (for [x (range width) y (range height)] [x y])]\r\n    (->> all-positions\r\n         (remove #(= % player-pos))\r\n         shuffle\r\n         (take wall-count))))\r\n\r\n(defn init-boards\r\n  \"[move-count configs] -> \uc5ec\ub7ec \ubcf4\ub4dc \uc0dd\uc131\"\r\n  [move-count configs]\r\n  (let [global-route (create-rand-move move-count)]\r\n    (mapv (fn [{:keys [width height player-pos walls-pos route wall-density]\r\n                :or {wall-density 0.25}}]\r\n            (let [r   (or route global-route)\r\n                  pp  (or player-pos [(rand-int width) (rand-int height)])\r\n                  wp  (or walls-pos (generate-random-walls width height pp wall-density))]\r\n              (create-board width height pp wp r)))\r\n          configs)))\r\n\r\n(comment\r\n(let [route (create-rand-move 10)\r\n      width 5\r\n      height 5]\r\n  (println route)\r\n  \r\n  (init-boards 10 [{:width width :height height :route route}\r\n                   {:width width :height height :route route}\r\n                   {:width width :height height :route route}\r\n                   {:width width :height height :route route}])\r\n  )\r\n  )\r\n"]}