{"version":3,"sources":["com/app/state.cljs"],"mappings":"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","names":["js/com","js/com.app","js/com.app.state","js/com.app.state.game-state","com.app.state/game-state","reagent.core.atom","com.app.state/reset-level!","level","cljs.core/deref","stage","com.app.stages/get-stage","move-count","configs","route","com.app.generator.create_rand_move","boards","com.app.generator/init-boards","p1__45466#","cljs.core.map","cljs.core.assoc","cljs.core.swap_BANG_","cljs.core/assoc","com.app.state/add-move!","direction","cljs.core._EQ_","cljs.core/update","cljs.core/conj","cljs.core/inc","com.app.state/check-game-completion!","com.app.state/undo-move!","and__4251__auto__","cljs.core/not-empty","cljs.core/pop","cljs.core/dec","com.app.state/reset-moves!","com.app.state/next-level!","current","next-level","com.app.stages/max-level","com.app.state/prev-level!","prev-level","com.app.state/toggle-solution!","cljs.core/not","com.app.state/toggle-help!","inputs","cljs.core/seq","updated-boards","p1__45467#","com.app.move/move","all-completed?","p1__45468#","cljs.core/every?","current-best","cljs.core.get_in","cljs.core/assoc-in","com.app.state/get-current-stage","com.app.state/get-updated-boards","cljs.core/map?","p1__45469#","com.app.state/print-board-correct","state","cljs.core.println","temp__5753__auto__","first-board","cljs.core/first","board","seq__45470","chunk__45471","count__45472","i__45473","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","row","cljs.core.apply","cljs.core/str","p__45482","vec__45483","cljs.core.nth","p__45486","vec__45487","base","overlay","com.app.state/force-refresh-boards!"],"sourcesContent":["(ns com.app.state\r\n  (:require [reagent.core :as r]\r\n            [com.app.stages :as stages]\r\n            [com.app.generator :as gen]\r\n            [com.app.move :as move]))\r\n\r\n;; \uc804\uc5ed \uac8c\uc784 \uc0c1\ud0dc\r\n(defonce game-state\r\n  (r/atom {:current-level 1\r\n           :boards []\r\n           :updated-boards []\r\n           :player-inputs []\r\n           :game-status :playing ; :playing, :completed, :failed\r\n           :show-solution false\r\n           :show-help false\r\n           :move-count 0\r\n           :best-scores {}\r\n           :current-route []}))\r\n\r\n(defn reset-level! \r\n  \"\ud604\uc7ac \ub808\ubca8\uc744 \ucd08\uae30\ud654\"\r\n  []\r\n  (let [level (:current-level @game-state)\r\n        stage (stages/get-stage level)]\r\n    (when stage\r\n      (let [move-count (:answer stage)\r\n            configs (:configs stage)\r\n            route (gen/create-rand-move move-count)\r\n            boards (gen/init-boards move-count \r\n                                   (map #(assoc % :route route) configs))]\r\n        (swap! game-state assoc\r\n               :boards boards\r\n               :updated-boards []\r\n               :player-inputs []\r\n               :game-status :playing\r\n               :show-solution false\r\n               :show-help false\r\n               :move-count 0\r\n               :current-route route)))))\r\n\r\n(declare check-game-completion!)\r\n\r\n(defn add-move! \r\n  \"\ud50c\ub808\uc774\uc5b4 \uc785\ub825 \ucd94\uac00\"\r\n  [direction]\r\n  (when (= (:game-status @game-state) :playing)\r\n    (swap! game-state update :player-inputs conj direction)\r\n    (swap! game-state update :move-count inc)\r\n    (check-game-completion!)))\r\n\r\n(defn undo-move! \r\n  \"\ub9c8\uc9c0\ub9c9 \uc774\ub3d9 \ucde8\uc18c\"\r\n  []\r\n  (when (and (= (:game-status @game-state) :playing)\r\n             (not-empty (:player-inputs @game-state)))\r\n    (swap! game-state update :player-inputs pop)\r\n    (swap! game-state update :move-count dec)\r\n    (swap! game-state assoc :updated-boards [])))\r\n\r\n(defn reset-moves! \r\n  \"\ubaa8\ub4e0 \uc774\ub3d9 \ucd08\uae30\ud654\"\r\n  []\r\n  (swap! game-state assoc \r\n         :player-inputs []\r\n         :updated-boards []\r\n         :move-count 0\r\n         :game-status :playing))\r\n\r\n(defn next-level! \r\n  \"\ub2e4\uc74c \ub808\ubca8\ub85c \uc774\ub3d9\"\r\n  []\r\n  (let [current (:current-level @game-state)\r\n        next-level (inc current)]\r\n    (if (<= next-level (stages/max-level))\r\n      (do\r\n        (swap! game-state assoc :current-level next-level)\r\n        (reset-level!))\r\n      (swap! game-state assoc :game-status :all-completed))))\r\n\r\n(defn prev-level! \r\n  \"\uc774\uc804 \ub808\ubca8\ub85c \uc774\ub3d9\"\r\n  []\r\n  (let [current (:current-level @game-state)\r\n        prev-level (dec current)]\r\n    (when (>= prev-level 1)\r\n      (swap! game-state assoc :current-level prev-level)\r\n      (reset-level!))))\r\n\r\n(defn toggle-solution! \r\n  \"\uc194\ub8e8\uc158 \ud45c\uc2dc \ud1a0\uae00\"\r\n  []\r\n  (swap! game-state update :show-solution not))\r\n\r\n(defn toggle-help! \r\n  \"\ub3c4\uc6c0\ub9d0 \ud45c\uc2dc \ud1a0\uae00\"\r\n  []\r\n  (swap! game-state update :show-help not))\r\n\r\n(defn check-game-completion! \r\n  \"\uac8c\uc784 \uc644\ub8cc \uc0c1\ud0dc \ud655\uc778\"\r\n  []\r\n  (let [boards (:boards @game-state)\r\n        inputs (:player-inputs @game-state)]\r\n    (when (seq boards)\r\n      (let [updated-boards (map #(move/move % inputs) boards)\r\n            all-completed? (every? #(= (:player-pos %) (:goal-pos %)) updated-boards)]\r\n        (swap! game-state assoc :updated-boards updated-boards)\r\n        (when all-completed?\r\n          (let [level (:current-level @game-state)\r\n                move-count (:move-count @game-state)\r\n                current-best (get-in @game-state [:best-scores level] 9999)]\r\n            (when (< move-count current-best)\r\n              (swap! game-state assoc-in [:best-scores level] move-count))\r\n            (swap! game-state assoc :game-status :completed)))))))\r\n\r\n(defn get-current-stage []\r\n  \"\ud604\uc7ac \uc2a4\ud14c\uc774\uc9c0 \uc815\ubcf4 \ubc18\ud658\"\r\n  (stages/get-stage (:current-level @game-state)))\r\n\r\n(defn get-updated-boards []\r\n  \"\ud50c\ub808\uc774\uc5b4 \uc785\ub825\uc774 \uc801\uc6a9\ub41c \ubcf4\ub4dc\ub4e4 \ubc18\ud658\"\r\n  (let [updated-boards (:updated-boards @game-state)\r\n        boards (:boards @game-state)\r\n        inputs (:player-inputs @game-state)]\r\n    ;; \uce90\uc2dc\ub41c \uc5c5\ub370\uc774\ud2b8\ub41c \ubcf4\ub4dc\uac00 \uc788\uc73c\uba74 \uc0ac\uc6a9, \uc5c6\uc73c\uba74 \uc0c8\ub85c \uacc4\uc0b0\r\n    (if (seq updated-boards)\r\n      updated-boards\r\n      (if (and (seq boards) (every? map? boards))\r\n        (map #(move/move % inputs) boards)\r\n        []))))\r\n\r\n;; \ub514\ubc84\uae45 \ud5ec\ud37c \ud568\uc218\ub4e4\r\n(defn print-board-correct []\r\n  \"\ud604\uc7ac \uac8c\uc784 \uc0c1\ud0dc\uc640 \ubcf4\ub4dc \uc0c1\ud0dc\ub97c \ucd9c\ub825\"\r\n  (let [state @game-state\r\n        boards (get-updated-boards)]\r\n    (println \"\")\r\n    (println \"=== \uac8c\uc784 \uc0c1\ud0dc ===\")\r\n    (println \"\ub808\ubca8:\" (:current-level state))\r\n    (println \"\uc774\ub3d9 \ud69f\uc218:\" (:move-count state))\r\n    (println \"\uc0c1\ud0dc:\" (:game-status state))\r\n    (when-let [first-board (first boards)]\r\n      (println \"\ud50c\ub808\uc774\uc5b4 \uc704\uce58:\" (:player-pos first-board))\r\n      (println \"\ubaa9\ud45c \uc704\uce58:\" (:goal-pos first-board)))\r\n    (println \"\")\r\n    (println \"=== \ubcf4\ub4dc ===\")\r\n    (when-let [first-board (first boards)]\r\n      (let [board (:board first-board)]\r\n        (doseq [row board]\r\n          (println (apply str (map (fn [[base overlay]]\r\n                                     (cond\r\n                                       (= overlay :player) \"P\"\r\n                                       (= base :wall) \"\u2588\"\r\n                                       (= base :goal) \"G\"\r\n                                       :else \".\"))\r\n                                   row))))))\r\n    (println \"===============\")\r\n    (println \"\")\r\n    (println \"=== \ub3c4\uc6c0\ub9d0 ===\")\r\n    (println \"\ub3c4\uc6c0\ub9d0 \ud45c\uc2dc:\" (:show-help state))\r\n    (println \"===============\")\r\n    (println \"\")))\r\n\r\n(defn force-refresh-boards! []\r\n  \"\ubcf4\ub4dc \uc0c1\ud0dc\ub97c \uac15\uc81c\ub85c \uc0c8\ub85c\uace0\uce68\"\r\n  []\r\n  (swap! game-state assoc :updated-boards [])\r\n  (check-game-completion!))"]}